apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'
apply plugin: 'android-apt'
//apply plugin: 'io.fabric'
apply plugin: "jacoco"

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "jp.water_cell.android.template"
        minSdkVersion 15
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true

//        manifestPlaceholders = [crashlytics_api_key: 'CrashlyticsのAPIキーをここに書く']
    }

    compileOptions {
        encoding = 'UTF-8'
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions {
        abortOnError true
        checkAllWarnings true
        warningsAsErrors true
        checkReleaseBuilds true
    }

    packagingOptions {
        // exclude duplicate files in apache commons
        // pickFirst なら最初に見つけたやつが apk に入る
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'LICENSE.txt'
    }

    signingConfigs {
        release
    }

    buildTypes {
        debug {
            versionNameSuffix '-debug'
            applicationIdSuffix '.debug'

            manifestPlaceholders = [google_maps_key: 'デバッグ用の証明書に対応するAPIキーをここに書く']

            testCoverageEnabled = true
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            // gradle.properties にリリース署名用の設定があれば署名を有効化します。
            if (project.hasProperty('storeFile')) {
                signingConfig signingConfigs.release
            }

            manifestPlaceholders = [google_maps_key: 'リリース用の証明書に対応するAPIキーをここに書く']
        }
    }
}

if (project.hasProperty('storeFile')) {
    android.signingConfigs.release.storeFile = file(storeFile)
}
if (project.hasProperty('storePassword')) {
    android.signingConfigs.release.storePassword = storePassword
}
if (project.hasProperty('keyAlias')) {
    android.signingConfigs.release.keyAlias = keyAlias
}
if (project.hasProperty('keyPassword')) {
    android.signingConfigs.release.keyPassword = keyPassword
}

sourceSets {
    androidTest {
        java {
            srcDir 'src/androidTest/java'
        }
    }
    test {
        java {
            srcDir 'src/test/java'
        }
    }
}

dependencies {
    compile "com.google.android.gms:play-services:${project.playServicesVersion}"
    compile "com.android.support:appcompat-v7:${project.supportPackageVersion}"

    compile "net.vvakame:jsonpullparser-core:${project.jppVersion}"
    apt "net.vvakame:jsonpullparser-apt:${project.jppVersion}"

//    compile("com.crashlytics.sdk.android:crashlytics:${crashlyticsVersion}@aar") {
//        transitive = true;
//    }

    compile "com.squareup.okhttp:okhttp:${project.okhttpVersion}"
    compile "com.squareup.okhttp:okhttp-urlconnection:${project.okhttpVersion}"
    compile "com.squareup.picasso:picasso:${project.picassoVersion}"

    compile "joda-time:joda-time:${project.jodaTimeVersion}"

    compile "com.github.chrisbanes.photoview:library:${project.photoViewVersion}"

    compile "com.jakewharton:butterknife:${project.butterKnifeVersion}"
    apt "com.jakewharton:butterknife:${project.butterKnifeVersion}"

    compile "de.greenrobot:eventbus:${project.eventbusVersion}"

    // Espresso
    androidTestCompile "com.android.support.test.espresso:espresso-core:${project.espressoVersion}"
    androidTestCompile "com.android.support.test:runner:${project.testRunnerVersion}"
    androidTestCompile "com.android.support.test:rules:${project.testRulesVersion}"
    androidTestCompile "com.android.support:support-annotations:${project.supportPackageVersion}"

    // Robolectric
    testCompile "org.robolectric:robolectric:${project.robolectricVersion}"
    testCompile "junit:junit:${project.junitVersion}"
    testCompile "org.hamcrest:hamcrest-core:${project.hamcrestVersion}"
    testCompile "org.hamcrest:hamcrest-library:${project.hamcrestVersion}"
    testCompile "org.hamcrest:hamcrest-integration:${project.hamcrestVersion}"
}

tasks.withType(Test).whenTaskAdded {
    // play sevicesのVerifyError回避 (see https://github.com/robolectric/robolectric/issues/1186#issuecomment-53778180)
    it.jvmArgs '-noverify'
}

task jacoco(type: JacocoReport, dependsOn: "testDebug") {
    reports {
        xml.enabled = true
        html.enabled = true
    }
    classDirectories = fileTree(
            dir: "${project.buildDir}/intermediates/classes/debug",
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/BuildConfig.class',
                       '**/Manifest*.*',
                       '**/*$$ViewBinder*.class',
                       '**/*Gen.class',
            ])
    sourceDirectories = files("${project.projectDir}/src/main/java")
    executionData = fileTree(dir: project.projectDir, includes: ['**/*.exec', '**/*.ec'])
}

